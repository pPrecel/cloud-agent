// Code generated by mockery v2.14.0. DO NOT EDIT.

package automock

import mock "github.com/stretchr/testify/mock"

// Formater is an autogenerated mock type for the Formater type
type Formater struct {
	mock.Mock
}

// JSON provides a mock function with given fields:
func (_m *Formater) JSON() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Table provides a mock function with given fields:
func (_m *Formater) Table() ([]string, [][]string) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 [][]string
	if rf, ok := ret.Get(1).(func() [][]string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([][]string)
		}
	}

	return r0, r1
}

// Text provides a mock function with given fields: outFormat, errFormat
func (_m *Formater) Text(outFormat string, errFormat string) string {
	ret := _m.Called(outFormat, errFormat)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(outFormat, errFormat)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// YAML provides a mock function with given fields:
func (_m *Formater) YAML() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewFormater interface {
	mock.TestingT
	Cleanup(func())
}

// NewFormater creates a new instance of Formater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFormater(t mockConstructorTestingTNewFormater) *Formater {
	mock := &Formater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
